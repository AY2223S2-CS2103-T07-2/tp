@startuml  add_expense_command

hide footbox
skinparam MinClassWidth 50
skinparam ParticipantPadding 10
skinparam Shadowing false
skinparam DefaultTextAlignment center
skinparam packageStyle Rectangle

box Model #F97181
participant "newExpense: Expense" as Expense order 2 
participant "dataModel: Model" as Model order 3
participant "expenseTracker: ExpenseTracker" as ExpenseTracker order 4
participant "expenses: ExpenseList" as ExpenseList order 5
end box
skinparam Sequence {
    MessageAlign center
    BoxFontSize 15
    BoxPadding 0
    BoxFontColor #FFFFFF
    ReferenceBackgroundColor #FFFFFF
}

box Logic #C8C8FA
participant ":AddExpenseCommand" as Command  order 1
end box

[->Command: execute(dataModel)
activate Command
Command -> Expense: getCategory()
activate Expense
Expense --> Command: newCategory
deactivate Expense
Command -> Model : getCategoryInstance(newCategory)
ref over Model, ExpenseTracker 
    : get existing category 
end ref
Model --> Command: existingCategory
alt existingCategory != null
    Command -> Expense: setCategory(existingCategory)
    activate Expense
    Expense -> Model 
    ref over Model 
        : sets category to
        : link to existing one.
    end ref
    Model --> Expense
    Expense --> Command 
    deactivate Expense
else else
    Command -> Model
    activate Model
    Model -> ExpenseTracker : addCategory(toAdd) 
    activate ExpenseTracker
    ExpenseTracker --> Model
    ExpenseTracker -> ExpenseList
    ref over ExpenseList
        : add newCategory to 
        : ObervableList<Expense>
    end ref
    ExpenseList --> ExpenseTracker
    deactivate ExpenseTracker
    Model --> Command
    deactivate Model
end
Command -> Model: addExpense(newExpense)
activate Model
Model -> ExpenseTracker: addExpense(newExpense)
activate ExpenseTracker
ExpenseTracker -> ExpenseList: add(expense)
activate ExpenseList
ExpenseList -> ExpenseList: add newExpense to \nObservableList<Expense>
ExpenseList --> ExpenseTracker
deactivate ExpenseList
ExpenseTracker -> ExpenseList: sortList()
activate ExpenseList
ExpenseList -> ExpenseList: sort expenses in \nObservableList<Expense>\nby date
ExpenseList --> ExpenseTracker
deactivate ExpenseList
ExpenseTracker --> Model
deactivate ExpenseTracker
Model -> Model: updateFilteredExpenseList\n(PREDICATE_SHOW_ALL_EXPENSES)
activate Model
deactivate Model
Model --> Command
deactivate Model
create ":CommandResult" as CommandResult order 1
Command -> CommandResult 
activate CommandResult
CommandResult --> Command
deactivate CommandResult
[<-- Command: result
destroy Command

@enduml
